version: '3'
services:

  #Nginx Service for web
  nginx:
    env_file:
      - .env
    container_name: '${APP_NAME}_frontend_prod'
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/Dockerfile_frontend_production
    volumes:
      - ./frontend:/app
      - ./docker/nginx_frontend/conf.d/:/etc/nginx/conf.d/
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - ${WEB_PROD_PORT}:80
      - ${WEB_PROD_SSL_PORT}:443
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  frontend_dev:
    env_file:
      - .env
    container_name: '${APP_NAME}_frontend_dev'
    build:
      context: .
      dockerfile: docker/Dockerfile_frontend_development
    volumes:
      - ./frontend:/app
      - ./docker/ssl:/ssl
    ports:
      - ${WEB_DEV_PORT}:4200
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: >
      bash -c "ng serve --host 0.0.0.0 --disable-host-check --ssl --ssl-key /ssl/privateKey.key  --ssl-cert /ssl/certificate.crt"

  #Web karma test service
  frontend_karma:
    image: trion/ng-cli-karma:latest
    container_name: '${APP_NAME}_frontend_karma'
    volumes:
      - ./frontend:/usr/app/
    working_dir: /usr/app/
    ports:
      - ${KARMA_PORT}:9876
    command: >
      bash -c "ng test"

  #Web e2e test service
  frontend_e2e:
    image: trion/ng-cli-e2e:latest
    container_name: '${APP_NAME}_frontend_e2e'
    volumes:
      - ./frontend:/usr/app/
    working_dir: /usr/app/
    command: >
      bash -c "ng e2e"

  #Nginx Service for API
  api:
    env_file:
      - .env
    image: nginx:alpine
    container_name: '${APP_NAME}_api'
    restart: unless-stopped
    tty: true
    ports:
      - "${API_PORT}:80"
      - "${SSL_PORT}:443"
    volumes:
      - ./backend:/var/www
      - ./docker/nginx_backend/conf.d/:/etc/nginx/conf.d/
      - ./logs/nginx:/var/log/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - app-network

  #PHP Service
  backend:
    env_file:
      - .env
    build:
      context: .
      dockerfile: docker/Dockerfile_backend
    image: digitalocean.com/php
    container_name: '${APP_NAME}_backend'
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  #MySQL Service
  db:
    image: ${MYSQL_IMAGE}
    env_file:
      - .env
    container_name: '${APP_NAME}_db'
    restart: unless-stopped
    tty: true
    ports:
      - "${MYSQL_DB_PORT}:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SERVICE_TAGS: ${MYSQL_SERVICE_TAGS}
      SERVICE_NAME: ${MYSQL_SERVICE_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./data/dbdata:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  #Certbot Service
  certbot:
    image: certbot/certbot
    env_file:
      - .env
    container_name: '${APP_NAME}_certbot'
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./logs/certbot:/var/log/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local
